// <auto-generated />
using System;
using EF_core_demo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_core_demo.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20241005180450_CreateAllOtherTablesAndRelations")]
    partial class CreateAllOtherTablesAndRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookBorrowTransaction", b =>
                {
                    b.Property<int>("booksBookId")
                        .HasColumnType("int");

                    b.Property<int>("membersMemberId")
                        .HasColumnType("int");

                    b.HasKey("booksBookId", "membersMemberId");

                    b.HasIndex("membersMemberId");

                    b.ToTable("BookBorrowTransaction");
                });

            modelBuilder.Entity("EF_core_demo.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("EF_core_demo.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookName");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EF_core_demo.Models.BookBorrowTransaction", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("bookId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("bookBorrowTransactions");
                });

            modelBuilder.Entity("EF_core_demo.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("EF_core_demo.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("members");
                });

            modelBuilder.Entity("BookBorrowTransaction", b =>
                {
                    b.HasOne("EF_core_demo.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_demo.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("membersMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_core_demo.Models.Book", b =>
                {
                    b.HasOne("EF_core_demo.Models.Author", "author")
                        .WithMany("books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_demo.Models.Category", "category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("category");
                });

            modelBuilder.Entity("EF_core_demo.Models.BookBorrowTransaction", b =>
                {
                    b.HasOne("EF_core_demo.Models.Member", null)
                        .WithMany("bookBorrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_demo.Models.Book", null)
                        .WithMany("bookBorrows")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_core_demo.Models.Author", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("EF_core_demo.Models.Book", b =>
                {
                    b.Navigation("bookBorrows");
                });

            modelBuilder.Entity("EF_core_demo.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EF_core_demo.Models.Member", b =>
                {
                    b.Navigation("bookBorrows");
                });
#pragma warning restore 612, 618
        }
    }
}
