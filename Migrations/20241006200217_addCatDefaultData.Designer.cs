// <auto-generated />
using System;
using EF_core_demo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_core_demo.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20241006200217_addCatDefaultData")]
    partial class addCatDefaultData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookBorrowTransaction", b =>
                {
                    b.Property<int>("booksBookId")
                        .HasColumnType("int");

                    b.Property<int>("membersMemberId")
                        .HasColumnType("int");

                    b.HasKey("booksBookId", "membersMemberId");

                    b.HasIndex("membersMemberId");

                    b.ToTable("BookBorrowTransaction");
                });

            modelBuilder.Entity("EF_core_demo.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorEmail = "Albert Einstein@virtual.com",
                            AuthorName = "Albert Einstein"
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorEmail = "john.doe@example.com",
                            AuthorName = "John Doe"
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorEmail = "jane.smith@example.com",
                            AuthorName = "Jane Smith"
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorEmail = "emily.johnson@example.com",
                            AuthorName = "Emily Johnson"
                        },
                        new
                        {
                            AuthorId = 5,
                            AuthorEmail = "michael.brown@example.com",
                            AuthorName = "Michael Brown"
                        },
                        new
                        {
                            AuthorId = 6,
                            AuthorEmail = "linda.white@example.com",
                            AuthorName = "Linda White"
                        },
                        new
                        {
                            AuthorId = 7,
                            AuthorEmail = "Moaziz@virtual.com",
                            AuthorName = "Mo Aziz"
                        },
                        new
                        {
                            AuthorId = 8,
                            AuthorEmail = "Maaziz@virtual.com",
                            AuthorName = "Ma Aziz"
                        },
                        new
                        {
                            AuthorId = 9,
                            AuthorEmail = "Moahziz@virtual.com",
                            AuthorName = "Moh Aziz"
                        },
                        new
                        {
                            AuthorId = 10,
                            AuthorEmail = "meeaziz@virtual.com",
                            AuthorName = "Mee Aziz"
                        },
                        new
                        {
                            AuthorId = 11,
                            AuthorEmail = "Moazaziz@virtual.com",
                            AuthorName = "Moaz Aziz"
                        },
                        new
                        {
                            AuthorId = 12,
                            AuthorEmail = "Mozaaziz@virtual.com",
                            AuthorName = "Moza Aziz"
                        });
                });

            modelBuilder.Entity("EF_core_demo.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookName");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EF_core_demo.Models.BookBorrowTransaction", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("bookId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("bookBorrowTransactions");
                });

            modelBuilder.Entity("EF_core_demo.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "Books that contain fictional stories and events.",
                            CategoryName = "Fiction"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "Books that are based on real facts and information.",
                            CategoryName = "Non-Fiction"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "Books that deal with futuristic concepts and technology.",
                            CategoryName = "Science Fiction"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryDescription = "Books that describe the life of a real person.",
                            CategoryName = "Biography"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryDescription = "Books that explore historical events and eras.",
                            CategoryName = "History"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryDescription = "Books that provide guidance on personal growth and improvement.",
                            CategoryName = "Self-Help"
                        },
                        new
                        {
                            CategoryId = 7,
                            CategoryDescription = "Books that involve magical or supernatural elements in the story.",
                            CategoryName = "Fantasy"
                        });
                });

            modelBuilder.Entity("EF_core_demo.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("members");
                });

            modelBuilder.Entity("BookBorrowTransaction", b =>
                {
                    b.HasOne("EF_core_demo.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_demo.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("membersMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_core_demo.Models.Book", b =>
                {
                    b.HasOne("EF_core_demo.Models.Author", "author")
                        .WithMany("books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_demo.Models.Category", "category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");

                    b.Navigation("category");
                });

            modelBuilder.Entity("EF_core_demo.Models.BookBorrowTransaction", b =>
                {
                    b.HasOne("EF_core_demo.Models.Member", null)
                        .WithMany("bookBorrows")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_demo.Models.Book", null)
                        .WithMany("bookBorrows")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_core_demo.Models.Author", b =>
                {
                    b.Navigation("books");
                });

            modelBuilder.Entity("EF_core_demo.Models.Book", b =>
                {
                    b.Navigation("bookBorrows");
                });

            modelBuilder.Entity("EF_core_demo.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EF_core_demo.Models.Member", b =>
                {
                    b.Navigation("bookBorrows");
                });
#pragma warning restore 612, 618
        }
    }
}
